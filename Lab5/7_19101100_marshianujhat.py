# -*- coding: utf-8 -*-
"""7_19101100_MarshiaNujhat.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Zg7kVzOT6CwmSuFMvsc93dcWkdzSpcPM

**Lab_Assignment_5_19101100**

**Loading dataset using pandas**
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

leaf_data= pd.read_csv('/content/sample_data/leaf_dataset.csv')

leaf_data

"""**Replacing null values**"""

leaf_data.isnull().sum()

from sklearn.impute import SimpleImputer

impute = SimpleImputer(missing_values=np.nan, strategy='mean')

impute.fit(leaf_data[['Elongation']])
leaf_data['Elongation']=impute.transform(leaf_data[['Elongation']])

impute.fit(leaf_data[['Maximal Indentation Depth']])
leaf_data['Maximal Indentation Depth']=impute.transform(leaf_data[['Maximal Indentation Depth']])

impute.fit(leaf_data[['Lobedness']])
leaf_data['Lobedness']=impute.transform(leaf_data[['Lobedness']])

impute.fit(leaf_data[['Average Contrast']])
leaf_data['Average Contrast']=impute.transform(leaf_data[['Average Contrast']])

# leaf_data[['Elongation']].head(20)
leaf_data.head(10)

#There are no categorical values in my dataset.

"""**Splitting dataset into features and labels**"""

from sklearn.model_selection import train_test_split

# features=np.array(leaf_data.iloc[:,1:16])
# labels=np.array(leaf_data.iloc[:,:1])
features=leaf_data[['specimen number','Eccentricity','Aspect Ratio','Elongation','Solidity','Stochastic Convexity','Isoperimetric Factor','Maximal Indentation Depth','Lobedness','Average Intensity','Average Contrast','Smoothness','Third moment','Uniformity','Entropy']]
labels=leaf_data[['Class(species)']]
X_train, X_test, Y_train, Y_test=train_test_split(features,labels,test_size=0.2, random_state=1)
X_train

"""**MinMaxScaling**"""

from sklearn.preprocessing import MinMaxScaler

scaler = MinMaxScaler()

scaler.fit(X_train)
X_train_scaled=scaler.transform(X_train)
X_test_scaled=scaler.transform(X_test)

pd.DataFrame(X_train_scaled)

pd.DataFrame(X_test_scaled)

"""**Classification using Logistic Regression**"""

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report
from sklearn.metrics import accuracy_score

leaf_lr = LogisticRegression()
leaf_lr.fit(X_train_scaled, Y_train) 
leaf_predictions = leaf_lr.predict(X_test_scaled)
# print(leaf_predictions)

"""Accuracy Score using Logistic Regression"""

lr_accuracy=accuracy_score(Y_test, leaf_predictions)     
print(lr_accuracy)                                        #Accuracy would have been better if we had more data in our dataset

"""**Classification using Decision Tree**"""

from sklearn.tree import DecisionTreeClassifier

leaf_clf = DecisionTreeClassifier(criterion='entropy',random_state=1)
leaf_clf.fit(X_train_scaled,Y_train)
Y_pred = leaf_clf.predict(X_test_scaled)

"""Accuracy Score using Decision Tree"""

dt_accuracy=accuracy_score(Y_test,Y_pred)
print(dt_accuracy)

"""**Comparing using barchart**"""

names_axis = ['Logistic Regression', 'Decision Tree']
values= [lr_accuracy, dt_accuracy]
plt.title('Comarison between accuracies in a bar chart')
plt.xlabel('x axis')
plt.ylabel('y axis')
plt.bar(names_axis, values)
plt.show()