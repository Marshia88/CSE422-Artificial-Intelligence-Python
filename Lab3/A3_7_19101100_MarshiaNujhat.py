# -*- coding: utf-8 -*-
"""7_19101100_MarshiaNujhat.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1R4f5SGX3McSV47jOpDlID4JJmuxkEtqn
"""

import random
import math

my_input=input('Please enter a student ID of 8 digits ')
# my_input='20201003'
# my_input='17301106'

range1_range2=input('Please enter the range of leaf nodes using which you want to take part in the game with a space between them ').split(" ")
range1=int(range1_range2[0])                                                                                                      #range of leaf nodes taken
range2=int(range1_range2[1])

turns_depth=int(my_input[:1])*2                                                                                                   #depth=turn of each agent*2
bullets_branch=int(my_input[2:3])                                                                                                 #no of bullets that can be shot=branch no
print(f'Depth and Branches ratio is {turns_depth}:{bullets_branch}')

hp_lifeline=int(my_input[-1:-3:-1])                                                                                               #initial lifeline of defender
# print(hp_lifeline)
list_bullet=[]
leaves_num=bullets_branch**turns_depth                                                                                            #no of leaves=branching factor^depth   

for i in range(leaves_num):
  list_bullet.append(random.randint(range1,range2))                                                                               #randomly values of leaf nodes assigned

print('Terminal States(Leaf Nodes) are',end=" ")
for leaf_node in range(len(list_bullet)):
  if leaf_node==len(list_bullet)-1:
    print(list_bullet[leaf_node],end=" ")
  else:
    print(list_bullet[leaf_node],end=",")
print()

mx_depth=math.inf
mn_depth=-math.inf
flag_attack=True

nodes_not_pruned=0                                                                                                               #initially, let no leaf nodes have been pruned so value is 0
start_attacker_level=0                                                                                                           #we start from level 0 which we assume is the attackers level

# list_bullet = [ 18,13,5,12,10,5,13,7,17,8,6,8,5,11,13,18] 
# list_bullet=[ 19,22,9,2,26,16,16,27,16]

def pruning_game(depth_turns, bulletsNum, mx_alpha, mn_beta, current_node, attacking_player,unpruned):

  if depth_turns==0:                                                                                                             #if we reach leaf node, it(child) has not been pruned so unpruned+=1
    unpruned+=1
    return list_bullet[current_node],unpruned

  if attacking_player:                                                                                                           #at max depth
    mx_value=-math.inf
    agents_position=2*current_node                                                                                               #to go down the level, we multiple the current node we are in by 2

    for times in range(bulletsNum):                                                                                              #for each branch no, children are traversed
      next_branch=agents_position+times                                                                                          #to traverse each child,we add current position of agent with 0 till branchNo
      node_value,unpruned=pruning_game(depth_turns-1, bulletsNum, mx_alpha, mn_beta, next_branch, False,unpruned)                #method called again for depth-1 and False as we traverse for defender now which is in the min depth
      mx_value= max(mx_value,node_value)                                                                                         #max value taken only from -infinite initially and current leaf node value 
      mx_alpha=max(mx_alpha,mx_value)                                                                                            #alpha updated in max depth

      if mx_alpha>=mn_beta:                                                                                                      #if alpha> beta, we prune the branch
        break
    return mx_value,unpruned

  else:
    mn_value=math.inf
    agents_position=2*current_node

    for times in range(bulletsNum):
      next_branch=agents_position+times
      node_value,unpruned=pruning_game(depth_turns-1, bulletsNum, mx_alpha, mn_beta, next_branch, True,unpruned)                #method called again for depth-1 and True as we traverse for attacker now which is in the max depth
      mn_value=min(mn_value,node_value)                                                                                         #min value taken only from infinite initially and current leaf node value
      mn_beta=min(mn_beta,mn_value)                                                                                             #beta updated in min depth

      if mx_alpha>=mn_beta:
        break
    return mn_value,unpruned

hp_damage,unpruned=pruning_game(turns_depth,bullets_branch, mn_depth,mx_depth, start_attacker_level, flag_attack,nodes_not_pruned) #returns the max damage caused by attacker and number of leaf nodes unpruned
# print(hp_damage)
print('Left life(HP) of the defender after maximum damage caused by the attacker is',hp_lifeline-hp_damage)
print('After Alpha-Beta Pruning Leaf Node Comparisons',unpruned)

