# -*- coding: utf-8 -*-
"""7_19101100_MarshiaNujhat.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1U9R0kUzoR1yR_9Kj9xRZSKSvDc1PA_iZ

**Lab_Assignment_6_19101100**

**Task 1: Loading dataset using pandas**
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

leaf_data= pd.read_csv('/content/sample_data/leaf_dataset.csv')

leaf_data

"""**Task 2: Replacing null values**"""

leaf_data.isnull().sum()

from sklearn.impute import SimpleImputer

impute = SimpleImputer(missing_values=np.nan, strategy='mean')

impute.fit(leaf_data[['Elongation']])
leaf_data['Elongation']=impute.transform(leaf_data[['Elongation']])

impute.fit(leaf_data[['Maximal Indentation Depth']])
leaf_data['Maximal Indentation Depth']=impute.transform(leaf_data[['Maximal Indentation Depth']])

impute.fit(leaf_data[['Lobedness']])
leaf_data['Lobedness']=impute.transform(leaf_data[['Lobedness']])

impute.fit(leaf_data[['Average Contrast']])
leaf_data['Average Contrast']=impute.transform(leaf_data[['Average Contrast']])

# leaf_data[['Elongation']].head(20)
leaf_data.head(10)

#There are no categorical values in my dataset.

"""**Splitting dataset into features and labels**"""

from sklearn.model_selection import train_test_split

features=leaf_data.iloc[:,1:16]
labels=leaf_data.iloc[:,:1]

X_train, X_test, Y_train, Y_test=train_test_split(features,labels,test_size=0.2, random_state=1)
X_train

"""**MinMaxScaling**"""

from sklearn.preprocessing import MinMaxScaler

scaler = MinMaxScaler()

scaler.fit(X_train)
X_train_scaled=scaler.transform(X_train)
X_test_scaled=scaler.transform(X_test)

pd.DataFrame(X_train_scaled)

pd.DataFrame(X_test_scaled)

"""**Task 3:**

**Support Vector Machine (SVM)**
"""

from sklearn.svm import SVC
svc = SVC(kernel="linear")

svc.fit(X_train_scaled, Y_train)
svc_predictions = svc.predict(X_test_scaled)
svc_predictions

#According to suplementary video, accuracy of every 3 classifier before and after PCA to be found

prePCA_train_svc_accuracy=svc.score(X_train_scaled, Y_train)
print("Training accuracy of the model is {:.2f}".format(prePCA_train_svc_accuracy))
prePCA_test_svc_accuracy=svc.score(X_test_scaled,Y_test)
print("Testing accuracy of the model is {:.2f}".format(prePCA_test_svc_accuracy))

"""**Neural Network (Multilayer Perceptron Classifier)**"""

from sklearn.neural_network import MLPClassifier  
nnc=MLPClassifier(hidden_layer_sizes=(7), activation="relu", max_iter=10000) 

nnc.fit(X_train_scaled, Y_train)
nnc_predictions=nnc.predict(X_test_scaled)
nnc_predictions

prePCA_train_nnc_accuracy=nnc.score(X_train_scaled, Y_train)
print("Training accuracy of the model is {:.2f}".format(prePCA_train_nnc_accuracy))
prePCA_test_nnc_accuracy=nnc.score(X_test_scaled,Y_test)
print("Testing accuracy of the model is {:.2f}".format(prePCA_test_nnc_accuracy))

"""**Random Forest**"""

from sklearn.ensemble import RandomForestClassifier
rfc = RandomForestClassifier(n_estimators=50)  #50 decision trees

rfc.fit(X_train_scaled, Y_train)
rfc_predictions = rfc.predict(X_test_scaled)
rfc_predictions

prePCA_train_rfc_accuracy=rfc.score(X_train_scaled, Y_train)
print("Training accuracy of the model is {:.2f}".format(prePCA_train_rfc_accuracy))
prePCA_test_rfc_accuracy=rfc.score(X_test_scaled,Y_test)
print("Testing accuracy of the model is {:.2f}".format(prePCA_test_rfc_accuracy))

"""**Task 4: Dimensionality Reduction using PCA**"""

from sklearn.decomposition import PCA
pca=PCA(n_components=8)   #my dataset has 15 features and according to supplementary video, the next number, 8 is to be taken for odd number/2
principal_col=pca.fit_transform(scaler.fit_transform(features))
principal_col

col=["Principal Col"+str(i) for i in range(1,9)]
sum(pca.explained_variance_ratio_)

post_table=pd.DataFrame(data=principal_col, columns=col)
post_table.head()

post_table['Label']=labels
post_table.head()
# post_table.shape

post_features=post_table.drop('Label',axis=1)
post_label=post_table['Label']
post_features.head()

"""**Splitting reduced data into train and test set**"""

post_X_train, post_X_test, post_Y_train, post_Y_test = train_test_split(post_features, post_label , test_size=0.2 , random_state=1)

for i in post_features.keys():
  print('max:', max(post_table[i]),'min',min(post_table[i]))
#needs scaling as max value of few columns of features>1 and min value<0.
#if not, comparison with scaled data before PCA might not be uniform

"""**Scaling the new dataset after PCA**"""

from sklearn.preprocessing import MinMaxScaler

scaler = MinMaxScaler()

scaler.fit(post_X_train)
post_X_train_scaled=scaler.transform(post_X_train)
post_X_test_scaled=scaler.transform(post_X_test)

"""**Task 5:**

**Support Vector Machine on Reduced Dataset**
"""

from sklearn.svm import SVC
svc = SVC(kernel="linear")

svc.fit(post_X_train_scaled, post_Y_train)
post_svc_predictions = svc.predict(post_X_test_scaled)
post_svc_predictions

postPCA_train_svc_accuracy=svc.score(post_X_train_scaled, post_Y_train)
print("Training accuracy of the model is {:.2f}".format(postPCA_train_svc_accuracy))
postPCA_test_svc_accuracy=svc.score(post_X_test_scaled,post_Y_test)
print("Testing accuracy of the model is {:.2f}".format(postPCA_test_svc_accuracy))

"""**Neural Network (MLPClassifier) on Reduced Dataset**"""

from sklearn.neural_network import MLPClassifier  
nnc=MLPClassifier(hidden_layer_sizes=(7), activation="relu", max_iter=10000) 

nnc.fit(post_X_train_scaled, post_Y_train)
post_nnc_predictions = nnc.predict(post_X_test_scaled)
post_nnc_predictions

postPCA_train_nnc_accuracy=nnc.score(post_X_train_scaled, post_Y_train)
print("Training accuracy of the model is {:.2f}".format(postPCA_train_nnc_accuracy))
postPCA_test_nnc_accuracy=nnc.score(post_X_test_scaled,post_Y_test)
print("Testing accuracy of the model is {:.2f}".format(postPCA_test_nnc_accuracy))

"""**Random Forest on Reduced Dataset**"""

from sklearn.ensemble import RandomForestClassifier
rfc = RandomForestClassifier(n_estimators=50)  

rfc.fit(post_X_train_scaled, post_Y_train)
post_rfc_predictions = rfc.predict(post_X_test_scaled)
post_rfc_predictions

postPCA_train_rfc_accuracy=rfc.score(post_X_train_scaled, post_Y_train)
print("Training accuracy of the model is {:.2f}".format(postPCA_train_rfc_accuracy))
postPCA_test_rfc_accuracy=rfc.score(post_X_test_scaled,post_Y_test)
print("Testing accuracy of the model is {:.2f}".format(postPCA_test_rfc_accuracy))

"""**Task 6: Comparing Accuracy of pre-PCA and post-PCA results**"""

#Plotting all of the classifiers
comp_test_data= {"Pre-PCA test data":[prePCA_test_svc_accuracy,prePCA_test_nnc_accuracy,prePCA_test_rfc_accuracy],
                "Post-PCA test data":[postPCA_test_svc_accuracy,postPCA_test_nnc_accuracy,postPCA_test_rfc_accuracy]}
comp_test_axis= ["SVM", "NNC", "RFC"];
test_chart=pd.DataFrame(data=comp_test_data, index=comp_test_axis)
test_chart.plot.bar()
plt.title("Accuracy Comparison of the test data\n between pre-PCA and post-PCA")
plt.show()

#Plotting all of the classifiers trained data
comp_train_data= {"Pre-PCA":[prePCA_train_svc_accuracy,prePCA_train_nnc_accuracy,prePCA_train_rfc_accuracy],
                "Post-PCA":[postPCA_train_svc_accuracy,postPCA_train_nnc_accuracy,postPCA_train_rfc_accuracy]}
comp_train_axis= ["SVM", "NNC", "RFC"];
train_chart= pd.DataFrame(data=comp_train_data, index=comp_train_axis)
train_chart.plot.bar()
plt.title("Accuracy Comparison of the trained data\n between pre-PCA and post-PCA")
plt.show()